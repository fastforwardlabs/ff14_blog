{
  
    
        "post0": {
            "title": "Building a QA System with BERT on Wikipedia",
            "content": ". So you&#39;ve decided to build a QA system. . You want to start with something simple and general so you plan to make it open domain using Wikipedia as a corpus for answering questions. You want to use the best NLP that your compute resources allow (you&#39;re lucky enough to have access to a GPU) so you&#39;re going to focus on the big, flashy Transformer models that are all the rage these days. . Sounds like you&#39;re building an IR-based QA system. In our previous post (Intro to Automated Question Answering), we covered the general design of these systems, which typically require two main components: the document retriever (a search engine) that selects the n most relevant documents from a large collection; and a document reader that processes these candidate documents in search of an explicit answer span. . . This time we&#39;re going to build it! This post is chock full of code that walks through our approach. We&#39;ll also highlight and clarify some powerful resources, including off-the-shelf models and libraries, that you can use to quickly get going on a QA system of your own. We&#39;ll cover all the necessary steps including: . installing libraries and setting up an environment | training a Transformer style model on the SQuAD dataset | understanding Hugging Face&#39;s run_squad.py training script and output | passing a full Wikipedia article as context for a question | . By the end of this post we&#39;ll have a working IR-based QA system with BERT as the document reader and Wikipedia&#39;s search engine as the document retriever - a fun toy model that that hints at potential real-world use cases. . This article was originally developed in a Jupyter Notebook and, thanks to fastpages, converted to a blog post. For an interactive environment, click the &quot;Open in Colab&quot; button above, though we note that, due to Colab&#39;s system constraints, some of the cells in this notebook might not be fully executable. We&#39;ll note when this is the case, but don&#39;t worry -- you&#39;ll still be able to play around with all the fun stuff. . Let&#39;s get started! . Setting up your virtual environment . A virtual environment is always best practice and we&#39;re using venv on our workhorse machine. For this project we&#39;ll be using PyTorch, which handles the heavy lifting of deep differentiable learning. If you have a GPU you&#39;ll want a PyTorch build that includes CUDA support, though most cells in this notebook will work fine without one. Check out PyTorch&#39;s quick install guide to determine the best build for your GPU and OS. We&#39;ll also be using the Transformers libarary, which provides easy-to-use implementations of all the popular Transformer architectures, like BERT. Finally, we&#39;ll need the wikipedia library for easy access and parsing of Wikipedia pages. . You can recreate our env (with CUDA 9.2 support -- but use the appropriate version for your machine) with the following commands in your command line: . $ python3 -m venv myenv $ source myenv/bin/activate $ pip install torch==1.5.0+cu92 torchvision==0.6.0+cu92 -f https://download.pytorch.org/whl/torch_stable.html $ pip install transformers==2.5.1 $ pip install wikipedia==1.4.0 . Note: Our GPU machine sports an older version of CUDA (9.2 -- we&#39;re getting around to updating that), so we need to use an older version of PyTorch for the necessary CUDA support. The training script we&#39;ll be using requires some specific packages. More recent versions of PyTorch include these packages; however, older versions do not. If you have to work with an older version of PyTorch you might need to install TensorboardX (see the hidden code cell below). . # collapse-hide # line 69 of `run_squad.py` script shows why you might need to install # tensorboardX if you have an older version of torch try: from torch.utils.tensorboard import SummaryWriter except ImportError: from tensorboardX import SummaryWriter . . Conversely, if you&#39;re working in Colab, you can run the cell below. . !pip install torch torchvision -f https://download.pytorch.org/whl/torch_stable.html !pip install transformers !pip install wikipedia . Hugging Face Transformers . I&#39;m new to PyTorch and even newer to Hugging Face (HF) but I&#39;m quickly becoming a convert! The Hugging Face Transformers package provides state-of-the-art general-purpose architecures for natural language understanding and natural language generation. They host dozens of pre-trained models operating in over 100 languages that you can use right out of the box. All of these models come with deep interoperability between PyTorch and Tensorflow 2.0, which means you can move a model from TF2.0 to PyTorch and back again with a line or two of code! . If you&#39;re new to Hugging Face, we strongly recommend working through the HF Quickstart guide as well as their excellent Transformer Notebooks (we did!), as we won&#39;t cover that material in this notebook. We&#39;ll be using AutoClasses, which serve as a wrapper around pretty much any of the base Transformer classes. . Fine-tuning a Transformer model for Question Answering . To train a Transformer for QA with Hugging Face we&#39;ll need . to pick a specific model architecture, | a QA dataset, and | the training script. | With these three things in hand we&#39;ll then walk through the fine-tuning process. . 1. Pick a Model . Not every Transformer architecture lends itself naturally to the task of question answering. For example, GPT does not do QA; similarly BERT does not do machine translation. HF identify the following model types for the QA task: . BERT | distilBERT | ALBERT | RoBERTa | XLNet | XLM | FlauBERT | . We&#39;ll stick with the now-classic BERT model in this notebook, but feel free to try out some others (we will - and we&#39;ll let you know when we do). Next up -- a training set. . 2. QA dataset: SQuAD . One of the most canonical datasets for QA is the Stanford Question Answering Dataset, or SQuAD, which comes in two flavors: SQuAD 1.1 and SQuAD 2.0. These reading comprehension datasets consist of questions posed on a set of Wikipedia articles, where the answer to every question is a segment (or span) of the corresponding passage. In SQuAD 1.1, all questions have an answer in the corresponding passage. SQuAD 2.0 steps up the difficulty by including questions that cannot be answered by the provided passage. . The following code will download the specified version of SQuAD. . # Set path with magic %env DATA_DIR=./data/squad # Download the data def download_squad(version=1): if version == 1: !wget -P $DATA_DIR https://rajpurkar.github.io/SQuAD-explorer/dataset/train-v1.1.json !wget -P $DATA_DIR https://rajpurkar.github.io/SQuAD-explorer/dataset/dev-v1.1.json else: !wget -P $DATA_DIR https://rajpurkar.github.io/SQuAD-explorer/dataset/train-v2.0.json !wget -P $DATA_DIR https://rajpurkar.github.io/SQuAD-explorer/dataset/dev-v2.0.json download_squad(version=2) . env: DATA_DIR=./data/squad --2020-05-11 21:36:52-- https://rajpurkar.github.io/SQuAD-explorer/dataset/train-v2.0.json Resolving rajpurkar.github.io (rajpurkar.github.io)... 185.199.109.153, 185.199.108.153, 185.199.111.153, ... Connecting to rajpurkar.github.io (rajpurkar.github.io)|185.199.109.153|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 42123633 (40M) [application/json] Saving to: ‘./data/squad/train-v2.0.json’ train-v2.0.json 100%[===================&gt;] 40.17M 14.6MB/s in 2.8s 2020-05-11 21:36:55 (14.6 MB/s) - ‘./data/squad/train-v2.0.json’ saved [42123633/42123633] --2020-05-11 21:36:56-- https://rajpurkar.github.io/SQuAD-explorer/dataset/dev-v2.0.json Resolving rajpurkar.github.io (rajpurkar.github.io)... 185.199.110.153, 185.199.111.153, 185.199.108.153, ... Connecting to rajpurkar.github.io (rajpurkar.github.io)|185.199.110.153|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 4370528 (4.2M) [application/json] Saving to: ‘./data/squad/dev-v2.0.json’ dev-v2.0.json 100%[===================&gt;] 4.17M 6.68MB/s in 0.6s 2020-05-11 21:36:56 (6.68 MB/s) - ‘./data/squad/dev-v2.0.json’ saved [4370528/4370528] . 3. Fine-tuning script . We&#39;ve chosen a model and we&#39;ve got some data. Time to train! . All the standard models that HF support have been pre-trained, which means they&#39;ve all been fed massive unsupervised training sets in order to learn basic language modeling. In order to perform well at specific tasks, like question answering, they must be trained further -- fine-tuned -- on specific datasets and tasks. . HF helpfully provide a script that fine-tunes a Transformer model on one of the SQuAD datasets, called run_squad.py. You can grab the script here or run the cell below. . # Download the run_squad.py training script !curl -L -O https://raw.githubusercontent.com/huggingface/transformers/master/examples/question-answering/run_squad.py . This script takes care of all the hard work that goes into fine-tuning a model and as such, it&#39;s pretty complicated. It hosts no fewer than 45 arguments, providing an impressive amount of flexibility and utility for those who do a lot of training. We&#39;ll leave the details of this script for another day, and focus instead on the basic command to fine-tune BERT on SQuAD 1.1 or 2.0. Below are the most important arguments for the run_squad.py fine-tuning script. . # Fine-tuning your own model for QA using HF&#39;s `run_squad.py` # Turn flags on and off according to the model you&#39;re training cmd = [ &#39;python&#39;, # &#39;-m torch.distributed.launch --nproc_per_node 2&#39;, # use this to perform distributed training over multiple GPUs &#39;run_squad.py&#39;, &#39;--model_type&#39;, &#39;bert&#39;, # model type (one of the list under &quot;Pick a Model&quot; above) &#39;--model_name_or_path&#39;, &#39;bert-base-uncased&#39;, # specific model name of the given model type (shown, a list is here: https://huggingface.co/transformers/pretrained_models.html) # on first execution this initiates a download of pre-trained model weights; # can also be a local path to a directory with model weights &#39;--output_dir&#39;, &#39;./models/bert/bbu_squad2&#39;, # directory for model checkpoints and predictions # &#39;--overwrite_output_dir&#39;, # use when adding output to a directory that is non-empty -- # for instance, when training crashes midway through and you need to restart it &#39;--do_train&#39;, # execute the training method &#39;--train_file&#39;, &#39;$DATA_DIR/train-v2.0.json&#39;, # provide the training data &#39;--version_2_with_negative&#39;, # ** MUST use this flag if training on SQuAD 2.0! DO NOT use if training on SQuAD 1.1 &#39;--do_lower_case&#39;, # ** set this flag if using an uncased model; don&#39;t use for Cased Models &#39;--do_eval&#39;, # execute the evaluation method on the dev set -- note: # if coupled with --do_train, evaluation runs after fine-tuning &#39;--predict_file&#39;, &#39;$DATA_DIR/dev-v2.0.json&#39;, # provide evaluation data (dev set) &#39;--eval_all_checkpoints&#39;, # evaluate the model on the dev set at each checkpoint &#39;--per_gpu_eval_batch_size&#39;, &#39;12&#39;, # evaluation batch size for each gpu &#39;--per_gpu_train_batch_size&#39;, &#39;12&#39;, # training batch size for each gpu &#39;--save_steps&#39;, &#39;5000&#39;, # How often checkpoints (complete model snapshot) are saved &#39;--threads&#39;, &#39;8&#39;, # num of CPU threads to use for converting SQuAD examples to model features # Model and Feature Hyperparameters &#39;--num_train_epochs&#39;, &#39;3&#39;, # number of training epochs - usually 2-3 for SQuAD &#39;--learning_rate&#39;, &#39;3e-5&#39;, # learning rate for the default optimizer (Adam in this case) &#39;--max_seq_length&#39;, &#39;384&#39;, # maximum length allowed for the full input sequence &#39;--doc_stride&#39;, &#39;128&#39; # Used for long documents that must be chunked into multiple features -- # this &quot;sliding window&quot; controls the amount of stride between chunks ] . Here&#39;s what to expect when executing run_squad.py for the first time: . Pre-trained model weights for the specified model type (i.e., bert-base-uncased) are downloaded. | SQuAD training examples are converted into features (takes 15-30 minutes depending on dataset size and number of threads). | Training features are saved to a cache file (so that you don&#39;t have to do this again for this model type). | If --do_train, training commences for as many epochs as you specify, saving the model weights every --save_steps steps until training finishes. These checkpoints are saved in [--output_dir]/checkpoint-[step number] subdirectories. | The final model weights and peripheral files are saved to --output_dir. | If --do_eval, SQuAD dev examples are converted into features. | Dev features are also saved to a cache file. | Evaluation commences and outputs a dizzying assortment of performance scores. | Time to train! . But first, a note on compute requirements. We don&#39;t recommend fine-tuning a Transformer model unless you&#39;re rocking at least one GPU and a considerable amount of RAM. For context, our GPU is several years old (GeForce GTX TITAN X) and while it&#39;s not nearly as fast as the Tesla V100 (the current cadillac of GPUs) it gets the job done. Fine-tuning bert-base-uncased takes about 1.75 hours per epoch. Additionally, our workhorse machine has 32GB CPU and 12GB GPU memory which is sufficient for data processing and training most models on either of the SQuAD datasets. . The following cells demonstrate two ways to fine-tune: on the command line and in a Colab notebook. . Training on the command line . I save the following as a shell script (run_squad.sh) and run on the command line ($ source run_squad.sh) of our workhorse GPU machine. Shell scripts help prevent numerous mistakes and mis-keys when typing args to a command line, especially for complex scripts like this. They also allow you to keep track of which arguments were used last (though, as we&#39;ll see below, the run_squad.py script has a solution for that). I actually keep two shell scripts -- one explicitly for training and another for evaluation. . #!/bin/sh export DATA_DIR=./data/squad export MODEL_DIR=./models python run_squad.py --model_type bert --model_name_or_path bert-base-uncased --output_dir models/bert/ --data_dir data/squad --overwrite_output_dir --overwrite_cache --do_train --train_file train-v2.0.json --version_2_with_negative --do_lower_case --do_eval --predict_file dev-v2.0.json --per_gpu_train_batch_size 2 --learning_rate 3e-5 --num_train_epochs 2.0 --max_seq_length 384 --doc_stride 128 --threads 10 --save_steps 5000 . Training in Colab . Alternatively, you can execute training in the cell as shown below. We note that standard Colab environments only provide 12GB of RAM. Converting the SQuAD dataset to features is memory intensive and may cause the basic Colab environment to fail silently. If you have a Colab instance with additional memory capacity (16GB+), this cell should execute fully. Either way, in the next section we&#39;ll download a model that has already been fine-tuned. . !python run_squad.py --model_type bert --model_name_or_path bert-base-uncased --output_dir models/bert/ --data_dir data/squad --overwrite_output_dir --overwrite_cache --do_train --train_file train-v2.0.json --version_2_with_negative --do_lower_case --do_eval --predict_file dev-v2.0.json --per_gpu_train_batch_size 2 --learning_rate 3e-5 --num_train_epochs 2.0 --max_seq_length 384 --doc_stride 128 --threads 10 --save_steps 5000 . Training Output . Successful completion of the run_squad.py yields a slew of output, which can be found in the --output_dir directory specified above. There you&#39;ll find... . Files for the model&#39;s tokenizer: . tokenizer_config.json | vocab.txt | special_tokens_map.json | . Files for the model itself: . pytorch_model.bin: these are the actual model weights (this file can be several GB for some models) | config.json: details of the model architecture | . Binary representation of the command line arguments used to train this model (so you&#39;ll never forget which arguments you used!) . training_args.bin | . And if you included --do_eval, you&#39;ll also see these files: . predictions_.json: the official best answer for each example | nbest_predictions_.json: the top n best answers for each example | . Providing the path to this directory to AutoModel or AutoModelForQuestionAnswering will load your fine-tuned model for use. . from transformers import AutoTokenizer, AutoModelForQuestionAnswering # Load the fine-tuned model tokenizer = AutoTokenizer.from_pretrained(&quot;./models/bert/bbu_squad2&quot;) model = AutoModelForQuestionAnswering.from_pretrained(&quot;./models/bert/bbu_squad2&quot;) . Using a pre-fine-tuned model from the Hugging Face repository . If you don&#39;t have access to GPUs or don&#39;t have the time to fiddle and train models, you&#39;re in luck! Hugging Face is more than a collection of slick Transformer classes -- it also hosts a repository for pre-trained and fine-tuned models contributed from the wide community of NLP practitioners. Searching for &quot;squad&quot; brings up at least 55 models. . . Clicking one of these links gives explicit code for using the model, and, in some cases, information on how it was trained and what results were achieved. Let&#39;s load one of these pre-fine-tuned models. . import torch from transformers import AutoTokenizer, AutoModelForQuestionAnswering # Executing these commands for the first time initiates a download of the # model weights to ~/.cache/torch/transformers/ tokenizer = AutoTokenizer.from_pretrained(&quot;deepset/bert-base-cased-squad2&quot;) model = AutoModelForQuestionAnswering.from_pretrained(&quot;deepset/bert-base-cased-squad2&quot;) . Let&#39;s try our model! . Whether you fine-tuned your own or used a pre-fine-tuned model, it&#39;s time to play with it! There are three steps to QA: . tokenize the input | obtain model scores | get the answer span | These steps are discussed in detail in the HF Transformer Notebooks. . question = &quot;Who ruled Macedonia&quot; context = &quot;&quot;&quot;Macedonia was an ancient kingdom on the periphery of Archaic and Classical Greece, and later the dominant state of Hellenistic Greece. The kingdom was founded and initially ruled by the Argead dynasty, followed by the Antipatrid and Antigonid dynasties. Home to the ancient Macedonians, it originated on the northeastern part of the Greek peninsula. Before the 4th century BC, it was a small kingdom outside of the area dominated by the city-states of Athens, Sparta and Thebes, and briefly subordinate to Achaemenid Persia.&quot;&quot;&quot; # 1. TOKENIZE THE INPUT # Note: if you don&#39;t include return_tensors=&#39;pt&#39; you&#39;ll get a list of lists which is easier for # exploration but you cannot feed that into a model. inputs = tokenizer.encode_plus(question, context, return_tensors=&quot;pt&quot;) # 2. OBTAIN MODEL SCORES # The AutoModelForQuestionAnswering class includes a span predictor on top of the model. # The model returns answer start and end scores for each word in the text answer_start_scores, answer_end_scores = model(**inputs) answer_start = torch.argmax(answer_start_scores) # Get the most likely beginning of answer with the argmax of the score answer_end = torch.argmax(answer_end_scores) + 1 # Get the most likely end of answer with the argmax of the score # 3. GET THE ANSWER SPAN # Once we have the most likely start and end tokens, we grab all the tokens between them # and convert tokens back to words! tokenizer.convert_tokens_to_string(tokenizer.convert_ids_to_tokens(inputs[&quot;input_ids&quot;][0][answer_start:answer_end])) . &#39;the Argead dynasty&#39; . QA on Wikipedia pages . We tried our model on a question paired with a short passage, but what if we want to retrieve an answer from a longer document? A typical Wikipedia page is much longer than the example above and we need to do a bit of massaging before we can use our model on longer contexts. . Let&#39;s start by pulling up a Wikipedia page. . import wikipedia as wiki import pprint as pp question = &#39;What is the wingspan of an albatross?&#39; results = wiki.search(question) print(&quot;Wikipedia search results for our question: n&quot;) pp.pprint(results) page = wiki.page(results[0]) text = page.content print(f&quot; nThe {results[0]} Wikipedia article contains {len(text)} characters.&quot;) . Wikipedia search results for our question: [&#39;Albatross&#39;, &#39;List of largest birds&#39;, &#39;Black-browed albatross&#39;, &#39;Argentavis&#39;, &#39;Pterosaur&#39;, &#39;Mollymawk&#39;, &#39;List of birds by flight speed&#39;, &#39;Largest body part&#39;, &#39;Pelican&#39;, &#39;Aspect ratio (aeronautics)&#39;] The Albatross Wikipedia article contains 38200 characters. . inputs = tokenizer.encode_plus(question, text, return_tensors=&#39;pt&#39;) print(f&quot;This translates into {len(inputs[&#39;input_ids&#39;][0])} tokens.&quot;) . Token indices sequence length is longer than the specified maximum sequence length for this model (10 &gt; 512). Running this sequence through the model will result in indexing errors . This translates into 8824 tokens. . The tokenizer takes the input as text and returns tokens. In general, tokenizers convert words or pieces of words into a model-ingestable format. The specific tokens and format are dependent on the type of model. For example, BERT tokenizes words differently from RoBERTa, so be sure to always use the associated tokenizer appropriate for your model. . In this case, the tokenizer converts our input text into 8824 tokens, but this far exceeds the maximum number of tokens that can be fed to the model at one time. Most BERT-esque models can only accept 512 tokens at once, thus the (somewhat confusing) warning above (how is 10 &gt; 512?). This means we&#39;ll have to split our input into chunks and each chunk must not exceed 512 tokens in total. . When working with Question Answering, it&#39;s crucial that each chunk follows this format: . [CLS] question tokens [SEP] context tokens [SEP] . This means that, for each segment of a Wikipedia article, we must prepend the original question, followed by the next &quot;chunk&quot; of article tokens. . # Time to chunk! from collections import OrderedDict # identify question tokens (token_type_ids = 0) qmask = inputs[&#39;token_type_ids&#39;].lt(1) qt = torch.masked_select(inputs[&#39;input_ids&#39;], qmask) print(f&quot;The question consists of {qt.size()[0]} tokens.&quot;) chunk_size = model.config.max_position_embeddings - qt.size()[0] - 1 # the &quot;-1&quot; accounts for # having to add a [SEP] token to the end of each chunk print(f&quot;Each chunk will contain {chunk_size - 2} tokens of the Wikipedia article.&quot;) # create a dict of dicts; each sub-dict mimics the structure of pre-chunked model input chunked_input = OrderedDict() for k,v in inputs.items(): q = torch.masked_select(v, qmask) c = torch.masked_select(v, ~qmask) chunks = torch.split(c, chunk_size) for i, chunk in enumerate(chunks): if i not in chunked_input: chunked_input[i] = {} thing = torch.cat((q, chunk)) if i != len(chunks)-1: if k == &#39;input_ids&#39;: thing = torch.cat((thing, torch.tensor([102]))) else: thing = torch.cat((thing, torch.tensor([1]))) chunked_input[i][k] = torch.unsqueeze(thing, dim=0) . The question consists of 12 tokens. Each chunk will contain 497 tokens of the Wikipedia article. . for i in range(len(chunked_input.keys())): print(f&quot;Number of tokens in chunk {i}: {len(chunked_input[i][&#39;input_ids&#39;].tolist()[0])}&quot;) . Number of tokens in chunk 0: 512 Number of tokens in chunk 1: 512 Number of tokens in chunk 2: 512 Number of tokens in chunk 3: 512 Number of tokens in chunk 4: 512 Number of tokens in chunk 5: 512 Number of tokens in chunk 6: 512 Number of tokens in chunk 7: 512 Number of tokens in chunk 8: 512 Number of tokens in chunk 9: 512 Number of tokens in chunk 10: 512 Number of tokens in chunk 11: 512 Number of tokens in chunk 12: 512 Number of tokens in chunk 13: 512 Number of tokens in chunk 14: 512 Number of tokens in chunk 15: 512 Number of tokens in chunk 16: 512 Number of tokens in chunk 17: 341 . Each of these chunks (except for the last one) has the following structure: . [CLS], 12 question tokens, [SEP], 497 tokens of the Wikipedia article, [SEP] token = 512 tokens . Each of these chunks can now be fed to the model without causing indexing errors. We&#39;ll get an &quot;answer&quot; for each chunk, however not all answers are useful since not every segment of a Wikipedia article is informative for our question. The model will return the [CLS] token when it determines that the context does not contain an answer to the question. . def convert_ids_to_string(tokenizer, input_ids): return tokenizer.convert_tokens_to_string(tokenizer.convert_ids_to_tokens(input_ids)) answer = &#39;&#39; # Now we iterate over our chunks, looking for the best answer from each chunk for _, chunk in chunked_input.items(): answer_start_scores, answer_end_scores = model(**chunk) answer_start = torch.argmax(answer_start_scores) answer_end = torch.argmax(answer_end_scores) + 1 ans = convert_ids_to_string(tokenizer, chunk[&#39;input_ids&#39;][0][answer_start:answer_end]) # If the ans == [CLS] then the model did not find a real answer in this chunk if ans != &#39;[CLS]&#39;: answer += ans + &quot; / &quot; print(answer) . 3 . 7 m / . Putting it all together . Let&#39;s recap. We&#39;ve essentially built a simple IR-based QA system! We&#39;re using wikipedia&#39;s search engine to return a list of candidate documents that we then feed into our Document Reader (in this case, BERT fine-tuned on SQuAD 2.0). Let&#39;s make our code easier to read and more self-contained by packaging the Document Reader into a class. . from transformers import AutoTokenizer, AutoModelForQuestionAnswering class DocumentReader: def __init__(self, pretrained_model_name_or_path=&#39;bert-large-uncased&#39;): self.READER_PATH = pretrained_model_name_or_path self.tokenizer = AutoTokenizer.from_pretrained(self.READER_PATH) self.model = AutoModelForQuestionAnswering.from_pretrained(self.READER_PATH) self.max_len = self.model.config.max_position_embeddings self.chunked = False def tokenize(self, question, text): self.inputs = self.tokenizer.encode_plus(question, text, add_special_tokens=True, return_tensors=&quot;pt&quot;) self.input_ids = self.inputs[&quot;input_ids&quot;].tolist()[0] if len(self.input_ids) &gt; self.max_len: self.inputs = self.chunkify() self.chunked = True def chunkify(self): &quot;&quot;&quot; Break up a long article into chunks that fit within the max token requirement for that Transformer model. Calls to BERT / RoBERTa / ALBERT require the following format: [CLS] question tokens [SEP] context tokens [SEP] &quot;&quot;&quot; # create question mask based on token_type_ids # value is 0 for question tokens, 1 for context tokens qmask = self.inputs[&#39;token_type_ids&#39;].lt(1) qt = torch.masked_select(self.inputs[&#39;input_ids&#39;], qmask) chunk_size = self.max_len - qt.size()[0] - 1 # the &quot;-1&quot; accounts for # having to add an ending [SEP] token to the end # create a dict of dicts; each sub-dict mimics the structure of pre-chunked model input chunked_input = OrderedDict() for k,v in self.inputs.items(): q = torch.masked_select(v, qmask) c = torch.masked_select(v, ~qmask) chunks = torch.split(c, chunk_size) for i, chunk in enumerate(chunks): if i not in chunked_input: chunked_input[i] = {} thing = torch.cat((q, chunk)) if i != len(chunks)-1: if k == &#39;input_ids&#39;: thing = torch.cat((thing, torch.tensor([102]))) else: thing = torch.cat((thing, torch.tensor([1]))) chunked_input[i][k] = torch.unsqueeze(thing, dim=0) return chunked_input def get_answer(self): if self.chunked: answer = &#39;&#39; for k, chunk in self.inputs.items(): answer_start_scores, answer_end_scores = self.model(**chunk) answer_start = torch.argmax(answer_start_scores) answer_end = torch.argmax(answer_end_scores) + 1 ans = self.convert_ids_to_string(chunk[&#39;input_ids&#39;][0][answer_start:answer_end]) if ans != &#39;[CLS]&#39;: answer += ans + &quot; / &quot; return answer else: answer_start_scores, answer_end_scores = self.model(**self.inputs) answer_start = torch.argmax(answer_start_scores) # Get the most likely beginning of answer with the argmax of the score answer_end = torch.argmax(answer_end_scores) + 1 # Get the most likely end of answer with the argmax of the score return self.convert_ids_to_string(self.inputs[&#39;input_ids&#39;][0][ answer_start:answer_end]) def convert_ids_to_string(self, input_ids): return self.tokenizer.convert_tokens_to_string(self.tokenizer.convert_ids_to_tokens(input_ids)) . Below is our clean, fully working QA system! Feel free to add your own questions. . # collapse-hide # To make the following output more readable I&#39;ll turn off the token sequence length warning import logging logging.getLogger(&quot;transformers.tokenization_utils&quot;).setLevel(logging.ERROR) . . questions = [ &#39;When was Barack Obama born?&#39;, &#39;Why is the sky blue?&#39;, &#39;How many sides does a pentagon have?&#39; ] reader = DocumentReader(&quot;deepset/bert-base-cased-squad2&quot;) # if you trained your own model using the training cell earlier you can access it with this: #reader = DocumentReader(&quot;./models/bert/bbu_squad2&quot;) for question in questions: print(f&quot;Question: {question}&quot;) results = wiki.search(question) page = wiki.page(results[0]) print(f&quot;Top wiki result: {page}&quot;) text = page.content reader.tokenize(question, text) print(f&quot;Answer: {reader.get_answer()}&quot;) print() . Question: When was Barack Obama born? Top wiki result: &lt;WikipediaPage &#39;Barack Obama Sr.&#39;&gt; Answer: 18 June 1936 / February 2 , 1961 / Question: Why is the sky blue? Top wiki result: &lt;WikipediaPage &#39;Diffuse sky radiation&#39;&gt; Answer: Rayleigh scattering / Question: How many sides does a pentagon have? Top wiki result: &lt;WikipediaPage &#39;The Pentagon&#39;&gt; Answer: five / . We got 2 out of 3 questions right! . Notice that, at least for the current questions I&#39;ve chosen, the QA systems fails because of Wikipedia&#39;s default search engine, not BERT! It pulls up the wrong page for two of our questions: a page about Barack Obama Sr. instead of the former US President, and an article about the US&#39;s Dept of Defense building &quot;The Pentagon&quot; instead of a page about geometry. In the latter case we ended up with the correct answer by coincidence! This illustrates that any successful IR-based QA system requires a search engine (document retriever) as good as the document reader. . Wrapping Up . There we have it! A working QA system on Wikipedia articles. This is great but it&#39;s admittedly not very sophisticated. Furthermore, we&#39;ve left a lot of questions unanswered: . Why fine-tune on the SQuAD dataset and not something else? What other options are there? | How good is BERT at answering questions? And how do we define &quot;good&quot;? | Why BERT and not another Transformer model? | Currently, our QA system can return an answer for each chunk of a Wiki article but not all of those answers are correct -- How can we improve our get_answer method? | Additionally, we&#39;re chunking a wiki article in such a way that we could be ending a chunk in the midde of a sentence -- Can we improve our chunkify method? | Over the course of this project we&#39;ll tackle these questions and more. By the end of this series we hope to demonstrate a snazzier QA model that incorporates everything we learn along the way. Stay tuned! .",
            "url": "https://qa.fastforwardlabs.com/pytorch/hugging%20face/wikipedia/bert/transformers/2020/05/19/Getting_Started_with_QA.html",
            "relUrl": "/pytorch/hugging%20face/wikipedia/bert/transformers/2020/05/19/Getting_Started_with_QA.html",
            "date": " • May 19, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Intro to Automated Question Answering",
            "content": "Welcome to the first edition of the Cloudera Fast Forward blog on Natural Language Processing for Question Answering! Throughout this series, we’ll build a Question Answering (QA) system with off-the-shelf algorithms and libraries and blog about our process and what we find along the way. We hope to wind up with a beginning-to-end documentary that provides: . insight into QA as a tool, | useful context to make decisions for those who might build their own QA system, | tips and tricks we pick up as we go, and | sample code and commentary. | . We’re trying a new thing here. In the past, we’ve documented our work in discrete reports at the end of our research process. We hope this new format suits the above goals and makes the topic more accessible, while ultimately being useful. . To kick off the series, this introductory post will discuss what QA is and isn’t, where this technology is being employed, and what techniques are used to accomplish this natural language task. . Question Answering in a Nutshell . Question Answering is a human-machine interaction to extract information from data using natural language queries. Machines do not inherently understand human languages any more than the average human understands machine language. A well-developed QA system bridges the gap between the two, allowing humans to extract knowledge from data in a way that is natural to us, i.e., asking questions. . QA systems accept questions in the form of natural language (typically text based, although you are probably also familiar with systems that accept speech input, such as Amazon’s Alexa or Apple’s Siri), and output a concise answer. Google’s search engine product adds a form of question answering in addition to its traditional search results, as illustrated here: . . Google took our question and returned a set of 1.3 million documents (not shown) relevant to the search terms, i.e., documents about Abraham Lincoln. Google also used what it knows about the contents of some of those documents to provide a “snippet” that answered our question in one word, presented above a link to the most pertinent website and keyword-highlighted text. . This goes beyond the standard capabilities of a search engine, which typically only return a list of relevant documents or websites. Google recently explained how they are using state-of-the-art NLP to enhance some of their search results. We’ll revisit this example in a later section and discuss how this technology works in practice and how we can (and will!) build our own QA system. . Why Question Answering? . Sophisticated Google searches with precise answers are fun, but how useful are QA systems in general? It turns out that this technology is maturing rapidly. Gartner recently identified natural language processing and conversational analytics as one of the top trends poised to make a substantial impact in the next three to five years. These technologies will provide increased data access, ease of use, and wider adoption of analytics platforms - especially to mainstream users. QA systems specifically will be a core part of the NLP suite, and are already seeing adoption in several areas. . Business Intelligence (BI) platforms are beginning to use Machine Learning (ML) to assist their users in exploring and analyzing their data through ML-augmented data preparation and insight generation. One of the key ways that ML is augmenting BI platforms is through the incorporation of natural language query functionality, which allows users to more easily query systems, and retrieve and visualize insights in a natural and user-friendly way, reducing the need for deep expertise in query languages, such as SQL. . Another area where QA systems will shine is in corporate and general use chatbots. Chatbots have been around for several years, but they mostly rely on hand-tailored responses. QA systems can augment this existing technology, providing a deeper understanding to improve user experience. For example, a QA system with knowledge of a company’s FAQs can streamline customer experience, while QA systems built atop internal company documentation could provide employees easier access to logs, reports, financial statements, or design docs. . The success of these systems will vary based on the use case, implementation, and richness of data. The field of QA is just starting to become commercially viable and it’s picking up speed. We think it’s a field worth exploring in order to understand what uses it might (and might not) have. So how does this technology work? . Designing a Question Answerer . As explained above, question answering systems process natural language queries and output concise answers. This general capability can be implemented in dozens of ways. How a QA system is designed depends, in large part, on three key elements: the knowledge provided to the system, the types of questions it can answer, and the structure of the data supporting the system. . Domain . QA systems operate within a domain, constrained by the data that is provided to them. The domain represents the embodiment of all the knowledge the system can know. There are two domain paradigms: open and closed. Closed domain systems are narrow in scope and focus on a specific topic or regime. Open domain systems are broad, answering general knowledge questions. . The BASEBALL system is an early example of a closed domain QA system. Built in the 1960s, it was limited to answering questions surrounding one year’s worth of baseball facts and statistics. Not only was this domain constrained to the topic of baseball, it was also constrained in the timeframe of data at its proverbial fingertips. A contemporary example of closed domain QA systems are those found in some BI applications. Generally, their domain is scoped to whatever data the user supplies, so they can only answer questions on the specific datasets to which they have access. . By contrast, open domain QA systems rely on knowledge supplied from vast resources - such as Wikipedia or the World Wide Web - to answer general knowledge questions. These systems can even answer general trivia. One example of such a system is IBM’s Watson, which won on Jeopardy! in 2011 (perhaps Watson was more of an Answer Questioner? We like jokes). Google’s QA capability as demonstrated above would also be considered open domain. . Question Type . Once you’ve decided the scope of knowledge your QA system will cover, you must also determine what types of questions it can answer. The vast majority of all QA systems answer factual questions: those that start with who, what, where, when, and how many. These types of questions tend to be straightforward enough for a machine to comprehend, and can be built directly atop structural databases or ontologies, as well as being extracted directly from unstructured text. . However, research is emerging that would allow QA systems to answer hypothetical questions, cause-effect questions, confirmation (yes/no) questions, and inferential questions (questions whose answers can be inferred from one or more pieces of evidence). Much of this research is still in its infancy, however, as the requisite natural language understanding is (for now) beyond the capabilities of most of today’s algorithms. . Implementation . There’s more than one way to cuddle a cat, as the saying goes. Question answering seeks to extract information from data and, generally speaking, data come in two broad formats: structured and unstructured. QA algorithms have been developed to harness the information from either paradigm: knowledge-based systems for structured data and information retrieval-based systems for unstructured (text) data. Some QA systems exploit a hybrid design that harvests information from both data types; IBM’s Watson is a famous example. In this section, we’ll highlight some of the most widely used techniques in each data regime - concentrating more on those for unstructured data, since this will be the focus of our applied research. Because we’ll be discussing explicit methods and techniques, the following sections are more technical. And we’ll note that, while we provide an overview here, an even more comprehensive discussion can be found in the Question Answering chapter of Jurafsky and Martin’s Speech and Language Processing (a highly accessible textbook). . Knowledge-Based Systems . A large quantity of data is encapsulated in structured formats, e.g., relational databases. The goal of knowledge-based QA systems is to map questions to these structured entities through semantic parsing algorithms. Semantic parsing techniques convert text strings to symbolic logic or query languages, e.g., SQL. . . Semantic parsing algorithms are highly tailored to their specific domain and database, and utilize templates as well as supervised learning approaches. Templates are handwritten rules, useful for frequently observed logical relationships. For example, an employee database might have a start-date template consisting of handwritten rules that search for when and hired since “when was Employee Name hired” would likely be a common query. . Supervised methods generalize this approach and are used when there exists a dataset of question-logical form pairs, such as in the figure above. These algorithms process the question, creating a parse tree that then maps the relevant parts of speech (nouns, verbs, and modifiers) to the appropriate logical form. Many algorithms begin with simple relationship mapping: matching segments from the question parse tree to a logical relation, as in the two examples below. . . The algorithm then bootstraps from simple relationship logic to incorporate more specific information from the parse tree, mapping it to more sophisticated logical queries like this birth-year example below. . . These systems can be made more robust by providing lexicons that capture the semantics and variations of natural language. For instance, in our employee database example, a question might contain the word “employed” rather than “hired,” but the intention is the same. . Information Retrieval-Based Systems: Retrievers and Readers . . Information retrieval-based question answering (IR QA) systems find and extract a text segment from a large collection of documents. The collection can be as vast as the entire web (open domain) or as specific as a company’s Confluence documents (closed domain). Contemporary IR QA systems first identify the most relevant documents in the collection, and then extract the answer from the contents of those documents. To illustrate this approach, let’s revisit our Google example from the introduction, only this time we’ll include some of the search results! . . We already talked about how the snippet box acts like a QA system. The search results below the snippet illustrate some of the reasons why an IR QA system can be more useful than a search engine alone. The relevant links vary from what is essentially advertising (study.com) to making fun of Lincoln’s ears (Reddit at its finest) to a discussion of color blindness (answers.com without the answer we want) to an article about all presidents’ eye colors (getting warmer, Chicago Tribune) to the very last link (answers.yahoo.com, which is on-topic - and narrowly scoped to Lincoln - but gives an ambiguous answer). Without the snippet box at the top, a user would have to skim each of these links to locate their answer - with varying degrees of success. . IR QA systems are not just search engines, which take general natural language terms and provide a list of relevant documents. IR QA systems perform an additional layer of processing on the most relevant documents to deliver a pointed answer, based on the contents of those documents (like the snippet box). While we won’t hazard a guess at exactly how Google extracted “gray” from these search results, we can examine how an IR QA system could exhibit similar functionality in a real world (e.g., non-Google) implementation. . Below we illustrate the workflow of a generic IR-based QA system. These systems generally have two main components: the document retriever and the document reader. . . The document retriever functions as the search engine, ranking and retrieving relevant documents to which it has access. It supplies a set of candidate documents that could answer the question (often with mixed results, per the Google search shown above). The document reader consists of reading comprehension algorithms built with core NLP techniques. This component processes the candidate documents and extracts from one of them an explicit span of text that best satisfies the query. Let’s dive deeper into each of these components. . Document Retriever . The document retriever has two core jobs: process the question for use in an IR engine, and use this IR query to retrieve the most appropriate documents and passages. Query processing can be as simple as no processing at all, and instead passing the entire question to the search engine. However, if the question is long or complicated, it often pays to process the query through various techniques - such as stop word removal, removing wh-words, converting to n-grams, or extracting named entities as keywords. . Some systems also extract contextual information from the query, e.g., the focus of the question and the expected answer type, which can then be used in the Document Reader during the answer extraction phase. The focus of a question is the string within the query that the user is looking to fill. The answer type is categorical, e.g., person, location, time, etc. In our earlier example, “when was Employee Name hired?”, the focus would be “when” and the answer type might be a numeric date-time. . The IR query is then passed to an IR algorithm. These algorithms search over all documents often using standard tf-idf cosine matching to rank documents by relevance. The simplest implementations would pass the top n most relevant documents to the document reader for answer extraction but this, too, can be made more sophisticated by breaking documents into their respective passages or paragraphs and filtering them (based on named entity matching or answer type, for example) to narrow down the number of passages sent to the document reader. . Document Reader . Once we have a selection of relevant documents or passages, it’s time to extract the answer. The sole purpose of the document reader is to apply reading comprehension algorithms to text segments for answer extraction. Modern reading comprehension algorithms come in two broad flavors: feature-based and neural-based. . Feature-based answer extraction can include rule-based templates, regex pattern matching, or a suite of NLP models (such as parts-of-speech tagging and named entity recognition) designed to identify features that will allow a supervised learning algorithm to determine whether a span of text contains the answer. One useful feature is the answer type identified by the document retriever during query processing. Other features could include the number of matched keywords in the question, the distance between the candidate answer and the query keywords, and the location of punctuation around the candidate answer. This type of QA works best when the answers are short and when the domain is narrow. . Neural-based reading comprehension approaches capitalize on the idea that the question and the answer are semantically similar. Rather than relying on keywords, these methods use extensive datasets that allow the model to learn semantic embeddings for the question and the passage. Similarity functions on these embeddings provide answer extraction. . Neural network models that perform well in this arena are Seq2Seq models and Transformers. (For a detailed dive into these architectures, interested readers should check out these excellent posts for Seq2Seq and Transformers.) The Transformer architecture in particular is currently revolutionizing the entire field of NLP. Models builts on this architecture include BERT (and its myriad off-shoots: RoBERTa, ALBERT, distilBERT, etc.), XLNet, GPT, T5, and more. These models - coupled with advances in compute power and transfer learning from massive unsupervised training sets - have started to outperform humans on some key NLP benchmarks, including question answering. . In this paradigm, one does not need to identify the answer type, the parts of speech, or the proper nouns. One need only feed the question and the passage into the model and wait for the answer. While this is an exciting development, it does have its drawbacks. When the model doesn’t work, it’s not always straightforward to identify the problem - and scaling these models is still a challenging prospect. These models generally perform better (according to your quantitative metric of choice) relative to the number of parameters they have (the more, the better), but the cost of inference also goes up - and with it, the difficulty of implementation in settings like federated learning scenarios or on mobile devices. . Building a Question-Answerer . At the beginning of this article, we said we were going to build a QA system. Now that we’ve covered some background, we can describe our approach. Over the course of the next two months, two of Cloudera Fast Forward’s Research Engineers, Melanie Beck and Ryan Micallef, will build a QA system following the information retrieval-based method, by creating a document retriever and document reader. We’ll focus our efforts on exploring and experimenting with various Transformer architectures (like BERT) for the document reader, as well as off-the-shelf search engine algorithms for the retriever. Neither of us has built a system like this before, so it’ll be a learning experience for everyone. And that’s precisely why we wanted to invite you along for the journey! We’ll share what we learn each step of the way by posting and discussing example code, in addition to articles covering topics like: . existing QA training sets for Transformers and what you’ll need to develop your own | how to evaluate the quality of a QA system - both the reader and retriever | building a search engine over a large set of documents | and more! | . Because we’ll be writing about our work as we go, we might end up in some dead ends or run into some nasty bugs; such is the nature of research! When these things happen, we’ll share our thoughts on what worked, what didn’t, and why - but it’s important to note upfront that while we do have a solid goal in mind, the end product may turn out to be quite different than what we currently envision. Stay tuned; in our next post we’ll start digging into the nuts and bolts! .",
            "url": "https://qa.fastforwardlabs.com/methods/background/2020/04/28/Intro-to-QA.html",
            "relUrl": "/methods/background/2020/04/28/Intro-to-QA.html",
            "date": " • Apr 28, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "Cloudera Fast Forward Labs is a machine intelligence research and advisory group within Cloudera. We routinely publish comprehensive reports that focus on a wide variety of machine learning capabilities. This blog focuses on question answering, a natural language processing and understanding (NLP/U) task that has recently begun to show signs of maturity, and documents our approach to implementing this model in a general setting, but with corporate use cases in mind. This project is led by two of CFF’s Research Engineers. . Melanie R. Beck, Ph.D. . Melanie is a reformed astrophysicist who now spends her days dreaming about machines and algorithms (to be honest, she still dreams about galaxies, too). She excels at understanding academic inventions but is even better at translating them into a language the rest of us can understand. Lately, she’s been obsessed with all things NLP. With experience as a data scientist in multiple industries ranging from hardware manufacturing to cybersecurity, she is a jack-of-all-trades with a passion for sharing what she’s learned. When she’s not reading about some esoteric machine learning framework, she can be found playing with her dog and two cats, or cross- stitching. . Ryan Micallef . Ryan researches emerging machine learning technologies and helps clients apply them. He is also an attorney barred in New York. He was an intellectual property litigator focused on technical cases for almost a decade before joining Fast Forward Labs (which has since been acquired by Cloudera). Ryan has a bachelor’s degree in Computer Science from Georgia Tech and a Juris Doctor degree from Brooklyn Law School. Ryan spends his free time soldering circuits and wrenching motorcycles, and teaches microcontroller programming at his local hackerspace, NYC Resistor. .",
          "url": "https://qa.fastforwardlabs.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}